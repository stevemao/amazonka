load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from lib/services/amazonka-translate/amazonka-translate.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-translate",
    srcs = [
        "gen/Amazonka/Translate.hs",
        "gen/Amazonka/Translate/CreateParallelData.hs",
        "gen/Amazonka/Translate/DeleteParallelData.hs",
        "gen/Amazonka/Translate/DeleteTerminology.hs",
        "gen/Amazonka/Translate/DescribeTextTranslationJob.hs",
        "gen/Amazonka/Translate/GetParallelData.hs",
        "gen/Amazonka/Translate/GetTerminology.hs",
        "gen/Amazonka/Translate/ImportTerminology.hs",
        "gen/Amazonka/Translate/Lens.hs",
        "gen/Amazonka/Translate/ListLanguages.hs",
        "gen/Amazonka/Translate/ListParallelData.hs",
        "gen/Amazonka/Translate/ListTagsForResource.hs",
        "gen/Amazonka/Translate/ListTerminologies.hs",
        "gen/Amazonka/Translate/ListTextTranslationJobs.hs",
        "gen/Amazonka/Translate/StartTextTranslationJob.hs",
        "gen/Amazonka/Translate/StopTextTranslationJob.hs",
        "gen/Amazonka/Translate/TagResource.hs",
        "gen/Amazonka/Translate/TranslateText.hs",
        "gen/Amazonka/Translate/Types.hs",
        "gen/Amazonka/Translate/Types/AppliedTerminology.hs",
        "gen/Amazonka/Translate/Types/Directionality.hs",
        "gen/Amazonka/Translate/Types/DisplayLanguageCode.hs",
        "gen/Amazonka/Translate/Types/EncryptionKey.hs",
        "gen/Amazonka/Translate/Types/EncryptionKeyType.hs",
        "gen/Amazonka/Translate/Types/Formality.hs",
        "gen/Amazonka/Translate/Types/InputDataConfig.hs",
        "gen/Amazonka/Translate/Types/JobDetails.hs",
        "gen/Amazonka/Translate/Types/JobStatus.hs",
        "gen/Amazonka/Translate/Types/Language.hs",
        "gen/Amazonka/Translate/Types/MergeStrategy.hs",
        "gen/Amazonka/Translate/Types/OutputDataConfig.hs",
        "gen/Amazonka/Translate/Types/ParallelDataConfig.hs",
        "gen/Amazonka/Translate/Types/ParallelDataDataLocation.hs",
        "gen/Amazonka/Translate/Types/ParallelDataFormat.hs",
        "gen/Amazonka/Translate/Types/ParallelDataProperties.hs",
        "gen/Amazonka/Translate/Types/ParallelDataStatus.hs",
        "gen/Amazonka/Translate/Types/Profanity.hs",
        "gen/Amazonka/Translate/Types/Tag.hs",
        "gen/Amazonka/Translate/Types/Term.hs",
        "gen/Amazonka/Translate/Types/TerminologyData.hs",
        "gen/Amazonka/Translate/Types/TerminologyDataFormat.hs",
        "gen/Amazonka/Translate/Types/TerminologyDataLocation.hs",
        "gen/Amazonka/Translate/Types/TerminologyProperties.hs",
        "gen/Amazonka/Translate/Types/TextTranslationJobFilter.hs",
        "gen/Amazonka/Translate/Types/TextTranslationJobProperties.hs",
        "gen/Amazonka/Translate/Types/TranslationSettings.hs",
        "gen/Amazonka/Translate/UntagResource.hs",
        "gen/Amazonka/Translate/UpdateParallelData.hs",
        "gen/Amazonka/Translate/Waiters.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_translate=\"2.0\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka-core",
        "@stackage//:base",
    ],
)

# rule generated from lib/services/amazonka-translate/amazonka-translate.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-translate-test",
    srcs = [
        "test/Main.hs",
        "test/Test/Amazonka/Gen/Translate.hs",
        "test/Test/Amazonka/Translate.hs",
        "test/Test/Amazonka/Translate/Internal.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_translate=\"2.0\"",
        "-Wall",
        "-threaded",
    ],
    main_file = "test/Main.hs",
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-translate",
        "//lib/amazonka-core",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
