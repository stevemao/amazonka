load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from lib/services/amazonka-kafkaconnect/amazonka-kafkaconnect.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-kafkaconnect",
    srcs = [
        "gen/Amazonka/KafkaConnect.hs",
        "gen/Amazonka/KafkaConnect/CreateConnector.hs",
        "gen/Amazonka/KafkaConnect/CreateCustomPlugin.hs",
        "gen/Amazonka/KafkaConnect/CreateWorkerConfiguration.hs",
        "gen/Amazonka/KafkaConnect/DeleteConnector.hs",
        "gen/Amazonka/KafkaConnect/DeleteCustomPlugin.hs",
        "gen/Amazonka/KafkaConnect/DescribeConnector.hs",
        "gen/Amazonka/KafkaConnect/DescribeCustomPlugin.hs",
        "gen/Amazonka/KafkaConnect/DescribeWorkerConfiguration.hs",
        "gen/Amazonka/KafkaConnect/Lens.hs",
        "gen/Amazonka/KafkaConnect/ListConnectors.hs",
        "gen/Amazonka/KafkaConnect/ListCustomPlugins.hs",
        "gen/Amazonka/KafkaConnect/ListWorkerConfigurations.hs",
        "gen/Amazonka/KafkaConnect/Types.hs",
        "gen/Amazonka/KafkaConnect/Types/ApacheKafkaCluster.hs",
        "gen/Amazonka/KafkaConnect/Types/ApacheKafkaClusterDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/AutoScaling.hs",
        "gen/Amazonka/KafkaConnect/Types/AutoScalingDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/AutoScalingUpdate.hs",
        "gen/Amazonka/KafkaConnect/Types/Capacity.hs",
        "gen/Amazonka/KafkaConnect/Types/CapacityDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/CapacityUpdate.hs",
        "gen/Amazonka/KafkaConnect/Types/CloudWatchLogsLogDelivery.hs",
        "gen/Amazonka/KafkaConnect/Types/CloudWatchLogsLogDeliveryDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/ConnectorState.hs",
        "gen/Amazonka/KafkaConnect/Types/ConnectorSummary.hs",
        "gen/Amazonka/KafkaConnect/Types/CustomPlugin.hs",
        "gen/Amazonka/KafkaConnect/Types/CustomPluginContentType.hs",
        "gen/Amazonka/KafkaConnect/Types/CustomPluginDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/CustomPluginFileDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/CustomPluginLocation.hs",
        "gen/Amazonka/KafkaConnect/Types/CustomPluginLocationDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/CustomPluginRevisionSummary.hs",
        "gen/Amazonka/KafkaConnect/Types/CustomPluginState.hs",
        "gen/Amazonka/KafkaConnect/Types/CustomPluginSummary.hs",
        "gen/Amazonka/KafkaConnect/Types/FirehoseLogDelivery.hs",
        "gen/Amazonka/KafkaConnect/Types/FirehoseLogDeliveryDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/KafkaCluster.hs",
        "gen/Amazonka/KafkaConnect/Types/KafkaClusterClientAuthentication.hs",
        "gen/Amazonka/KafkaConnect/Types/KafkaClusterClientAuthenticationDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/KafkaClusterClientAuthenticationType.hs",
        "gen/Amazonka/KafkaConnect/Types/KafkaClusterDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/KafkaClusterEncryptionInTransit.hs",
        "gen/Amazonka/KafkaConnect/Types/KafkaClusterEncryptionInTransitDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/KafkaClusterEncryptionInTransitType.hs",
        "gen/Amazonka/KafkaConnect/Types/LogDelivery.hs",
        "gen/Amazonka/KafkaConnect/Types/LogDeliveryDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/Plugin.hs",
        "gen/Amazonka/KafkaConnect/Types/PluginDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/ProvisionedCapacity.hs",
        "gen/Amazonka/KafkaConnect/Types/ProvisionedCapacityDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/ProvisionedCapacityUpdate.hs",
        "gen/Amazonka/KafkaConnect/Types/S3Location.hs",
        "gen/Amazonka/KafkaConnect/Types/S3LocationDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/S3LogDelivery.hs",
        "gen/Amazonka/KafkaConnect/Types/S3LogDeliveryDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/ScaleInPolicy.hs",
        "gen/Amazonka/KafkaConnect/Types/ScaleInPolicyDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/ScaleInPolicyUpdate.hs",
        "gen/Amazonka/KafkaConnect/Types/ScaleOutPolicy.hs",
        "gen/Amazonka/KafkaConnect/Types/ScaleOutPolicyDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/ScaleOutPolicyUpdate.hs",
        "gen/Amazonka/KafkaConnect/Types/StateDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/Vpc.hs",
        "gen/Amazonka/KafkaConnect/Types/VpcDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/WorkerConfiguration.hs",
        "gen/Amazonka/KafkaConnect/Types/WorkerConfigurationDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/WorkerConfigurationRevisionDescription.hs",
        "gen/Amazonka/KafkaConnect/Types/WorkerConfigurationRevisionSummary.hs",
        "gen/Amazonka/KafkaConnect/Types/WorkerConfigurationSummary.hs",
        "gen/Amazonka/KafkaConnect/Types/WorkerLogDelivery.hs",
        "gen/Amazonka/KafkaConnect/Types/WorkerLogDeliveryDescription.hs",
        "gen/Amazonka/KafkaConnect/UpdateConnector.hs",
        "gen/Amazonka/KafkaConnect/Waiters.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_kafkaconnect=\"2.0\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka-core",
        "@stackage//:base",
    ],
)

# rule generated from lib/services/amazonka-kafkaconnect/amazonka-kafkaconnect.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-kafkaconnect-test",
    srcs = [
        "test/Main.hs",
        "test/Test/Amazonka/Gen/KafkaConnect.hs",
        "test/Test/Amazonka/KafkaConnect.hs",
        "test/Test/Amazonka/KafkaConnect/Internal.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_kafkaconnect=\"2.0\"",
        "-Wall",
        "-threaded",
    ],
    main_file = "test/Main.hs",
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-kafkaconnect",
        "//lib/amazonka-core",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
