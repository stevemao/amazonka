load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from lib/services/amazonka-comprehendmedical/amazonka-comprehendmedical.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-comprehendmedical",
    srcs = [
        "gen/Amazonka/ComprehendMedical.hs",
        "gen/Amazonka/ComprehendMedical/DescribeEntitiesDetectionV2Job.hs",
        "gen/Amazonka/ComprehendMedical/DescribeICD10CMInferenceJob.hs",
        "gen/Amazonka/ComprehendMedical/DescribePHIDetectionJob.hs",
        "gen/Amazonka/ComprehendMedical/DescribeRxNormInferenceJob.hs",
        "gen/Amazonka/ComprehendMedical/DescribeSNOMEDCTInferenceJob.hs",
        "gen/Amazonka/ComprehendMedical/DetectEntitiesV2.hs",
        "gen/Amazonka/ComprehendMedical/DetectPHI.hs",
        "gen/Amazonka/ComprehendMedical/InferICD10CM.hs",
        "gen/Amazonka/ComprehendMedical/InferRxNorm.hs",
        "gen/Amazonka/ComprehendMedical/InferSNOMEDCT.hs",
        "gen/Amazonka/ComprehendMedical/Lens.hs",
        "gen/Amazonka/ComprehendMedical/ListEntitiesDetectionV2Jobs.hs",
        "gen/Amazonka/ComprehendMedical/ListICD10CMInferenceJobs.hs",
        "gen/Amazonka/ComprehendMedical/ListPHIDetectionJobs.hs",
        "gen/Amazonka/ComprehendMedical/ListRxNormInferenceJobs.hs",
        "gen/Amazonka/ComprehendMedical/ListSNOMEDCTInferenceJobs.hs",
        "gen/Amazonka/ComprehendMedical/StartEntitiesDetectionV2Job.hs",
        "gen/Amazonka/ComprehendMedical/StartICD10CMInferenceJob.hs",
        "gen/Amazonka/ComprehendMedical/StartPHIDetectionJob.hs",
        "gen/Amazonka/ComprehendMedical/StartRxNormInferenceJob.hs",
        "gen/Amazonka/ComprehendMedical/StartSNOMEDCTInferenceJob.hs",
        "gen/Amazonka/ComprehendMedical/StopEntitiesDetectionV2Job.hs",
        "gen/Amazonka/ComprehendMedical/StopICD10CMInferenceJob.hs",
        "gen/Amazonka/ComprehendMedical/StopPHIDetectionJob.hs",
        "gen/Amazonka/ComprehendMedical/StopRxNormInferenceJob.hs",
        "gen/Amazonka/ComprehendMedical/StopSNOMEDCTInferenceJob.hs",
        "gen/Amazonka/ComprehendMedical/Types.hs",
        "gen/Amazonka/ComprehendMedical/Types/Attribute.hs",
        "gen/Amazonka/ComprehendMedical/Types/AttributeName.hs",
        "gen/Amazonka/ComprehendMedical/Types/Characters.hs",
        "gen/Amazonka/ComprehendMedical/Types/ComprehendMedicalAsyncJobFilter.hs",
        "gen/Amazonka/ComprehendMedical/Types/ComprehendMedicalAsyncJobProperties.hs",
        "gen/Amazonka/ComprehendMedical/Types/Entity.hs",
        "gen/Amazonka/ComprehendMedical/Types/EntitySubType.hs",
        "gen/Amazonka/ComprehendMedical/Types/EntityType.hs",
        "gen/Amazonka/ComprehendMedical/Types/ICD10CMAttribute.hs",
        "gen/Amazonka/ComprehendMedical/Types/ICD10CMAttributeType.hs",
        "gen/Amazonka/ComprehendMedical/Types/ICD10CMConcept.hs",
        "gen/Amazonka/ComprehendMedical/Types/ICD10CMEntity.hs",
        "gen/Amazonka/ComprehendMedical/Types/ICD10CMEntityCategory.hs",
        "gen/Amazonka/ComprehendMedical/Types/ICD10CMEntityType.hs",
        "gen/Amazonka/ComprehendMedical/Types/ICD10CMRelationshipType.hs",
        "gen/Amazonka/ComprehendMedical/Types/ICD10CMTrait.hs",
        "gen/Amazonka/ComprehendMedical/Types/ICD10CMTraitName.hs",
        "gen/Amazonka/ComprehendMedical/Types/InputDataConfig.hs",
        "gen/Amazonka/ComprehendMedical/Types/JobStatus.hs",
        "gen/Amazonka/ComprehendMedical/Types/LanguageCode.hs",
        "gen/Amazonka/ComprehendMedical/Types/OutputDataConfig.hs",
        "gen/Amazonka/ComprehendMedical/Types/RelationshipType.hs",
        "gen/Amazonka/ComprehendMedical/Types/RxNormAttribute.hs",
        "gen/Amazonka/ComprehendMedical/Types/RxNormAttributeType.hs",
        "gen/Amazonka/ComprehendMedical/Types/RxNormConcept.hs",
        "gen/Amazonka/ComprehendMedical/Types/RxNormEntity.hs",
        "gen/Amazonka/ComprehendMedical/Types/RxNormEntityCategory.hs",
        "gen/Amazonka/ComprehendMedical/Types/RxNormEntityType.hs",
        "gen/Amazonka/ComprehendMedical/Types/RxNormTrait.hs",
        "gen/Amazonka/ComprehendMedical/Types/RxNormTraitName.hs",
        "gen/Amazonka/ComprehendMedical/Types/SNOMEDCTAttribute.hs",
        "gen/Amazonka/ComprehendMedical/Types/SNOMEDCTAttributeType.hs",
        "gen/Amazonka/ComprehendMedical/Types/SNOMEDCTConcept.hs",
        "gen/Amazonka/ComprehendMedical/Types/SNOMEDCTDetails.hs",
        "gen/Amazonka/ComprehendMedical/Types/SNOMEDCTEntity.hs",
        "gen/Amazonka/ComprehendMedical/Types/SNOMEDCTEntityCategory.hs",
        "gen/Amazonka/ComprehendMedical/Types/SNOMEDCTEntityType.hs",
        "gen/Amazonka/ComprehendMedical/Types/SNOMEDCTRelationshipType.hs",
        "gen/Amazonka/ComprehendMedical/Types/SNOMEDCTTrait.hs",
        "gen/Amazonka/ComprehendMedical/Types/SNOMEDCTTraitName.hs",
        "gen/Amazonka/ComprehendMedical/Types/Trait.hs",
        "gen/Amazonka/ComprehendMedical/Types/UnmappedAttribute.hs",
        "gen/Amazonka/ComprehendMedical/Waiters.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_comprehendmedical=\"2.0\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka-core",
        "@stackage//:base",
    ],
)

# rule generated from lib/services/amazonka-comprehendmedical/amazonka-comprehendmedical.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-comprehendmedical-test",
    srcs = [
        "test/Main.hs",
        "test/Test/Amazonka/ComprehendMedical.hs",
        "test/Test/Amazonka/ComprehendMedical/Internal.hs",
        "test/Test/Amazonka/Gen/ComprehendMedical.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_comprehendmedical=\"2.0\"",
        "-Wall",
        "-threaded",
    ],
    main_file = "test/Main.hs",
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-comprehendmedical",
        "//lib/amazonka-core",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
