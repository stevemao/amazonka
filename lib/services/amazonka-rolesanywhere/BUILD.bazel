load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from lib/services/amazonka-rolesanywhere/amazonka-rolesanywhere.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-rolesanywhere",
    srcs = [
        "gen/Amazonka/RolesAnywhere.hs",
        "gen/Amazonka/RolesAnywhere/CreateProfile.hs",
        "gen/Amazonka/RolesAnywhere/CreateTrustAnchor.hs",
        "gen/Amazonka/RolesAnywhere/DeleteCrl.hs",
        "gen/Amazonka/RolesAnywhere/DeleteProfile.hs",
        "gen/Amazonka/RolesAnywhere/DeleteTrustAnchor.hs",
        "gen/Amazonka/RolesAnywhere/DisableCrl.hs",
        "gen/Amazonka/RolesAnywhere/DisableProfile.hs",
        "gen/Amazonka/RolesAnywhere/DisableTrustAnchor.hs",
        "gen/Amazonka/RolesAnywhere/EnableCrl.hs",
        "gen/Amazonka/RolesAnywhere/EnableProfile.hs",
        "gen/Amazonka/RolesAnywhere/EnableTrustAnchor.hs",
        "gen/Amazonka/RolesAnywhere/GetCrl.hs",
        "gen/Amazonka/RolesAnywhere/GetProfile.hs",
        "gen/Amazonka/RolesAnywhere/GetSubject.hs",
        "gen/Amazonka/RolesAnywhere/GetTrustAnchor.hs",
        "gen/Amazonka/RolesAnywhere/ImportCrl.hs",
        "gen/Amazonka/RolesAnywhere/Lens.hs",
        "gen/Amazonka/RolesAnywhere/ListCrls.hs",
        "gen/Amazonka/RolesAnywhere/ListProfiles.hs",
        "gen/Amazonka/RolesAnywhere/ListSubjects.hs",
        "gen/Amazonka/RolesAnywhere/ListTagsForResource.hs",
        "gen/Amazonka/RolesAnywhere/ListTrustAnchors.hs",
        "gen/Amazonka/RolesAnywhere/TagResource.hs",
        "gen/Amazonka/RolesAnywhere/Types.hs",
        "gen/Amazonka/RolesAnywhere/Types/CredentialSummary.hs",
        "gen/Amazonka/RolesAnywhere/Types/CrlDetail.hs",
        "gen/Amazonka/RolesAnywhere/Types/CrlDetailResponse.hs",
        "gen/Amazonka/RolesAnywhere/Types/InstanceProperty.hs",
        "gen/Amazonka/RolesAnywhere/Types/ListRequest.hs",
        "gen/Amazonka/RolesAnywhere/Types/ProfileDetail.hs",
        "gen/Amazonka/RolesAnywhere/Types/ProfileDetailResponse.hs",
        "gen/Amazonka/RolesAnywhere/Types/ScalarCrlRequest.hs",
        "gen/Amazonka/RolesAnywhere/Types/ScalarProfileRequest.hs",
        "gen/Amazonka/RolesAnywhere/Types/ScalarTrustAnchorRequest.hs",
        "gen/Amazonka/RolesAnywhere/Types/Source.hs",
        "gen/Amazonka/RolesAnywhere/Types/SourceData.hs",
        "gen/Amazonka/RolesAnywhere/Types/SubjectDetail.hs",
        "gen/Amazonka/RolesAnywhere/Types/SubjectSummary.hs",
        "gen/Amazonka/RolesAnywhere/Types/Tag.hs",
        "gen/Amazonka/RolesAnywhere/Types/TrustAnchorDetail.hs",
        "gen/Amazonka/RolesAnywhere/Types/TrustAnchorDetailResponse.hs",
        "gen/Amazonka/RolesAnywhere/Types/TrustAnchorType.hs",
        "gen/Amazonka/RolesAnywhere/UntagResource.hs",
        "gen/Amazonka/RolesAnywhere/UpdateCrl.hs",
        "gen/Amazonka/RolesAnywhere/UpdateProfile.hs",
        "gen/Amazonka/RolesAnywhere/UpdateTrustAnchor.hs",
        "gen/Amazonka/RolesAnywhere/Waiters.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_rolesanywhere=\"2.0\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka-core",
        "@stackage//:base",
    ],
)

# rule generated from lib/services/amazonka-rolesanywhere/amazonka-rolesanywhere.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-rolesanywhere-test",
    srcs = [
        "test/Main.hs",
        "test/Test/Amazonka/Gen/RolesAnywhere.hs",
        "test/Test/Amazonka/RolesAnywhere.hs",
        "test/Test/Amazonka/RolesAnywhere/Internal.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_rolesanywhere=\"2.0\"",
        "-Wall",
        "-threaded",
    ],
    main_file = "test/Main.hs",
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-rolesanywhere",
        "//lib/amazonka-core",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
