load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from lib/services/amazonka-cloudwatch-logs/amazonka-cloudwatch-logs.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-cloudwatch-logs",
    srcs = [
        "gen/Amazonka/CloudWatchLogs.hs",
        "gen/Amazonka/CloudWatchLogs/AssociateKmsKey.hs",
        "gen/Amazonka/CloudWatchLogs/CancelExportTask.hs",
        "gen/Amazonka/CloudWatchLogs/CreateExportTask.hs",
        "gen/Amazonka/CloudWatchLogs/CreateLogGroup.hs",
        "gen/Amazonka/CloudWatchLogs/CreateLogStream.hs",
        "gen/Amazonka/CloudWatchLogs/DeleteDataProtectionPolicy.hs",
        "gen/Amazonka/CloudWatchLogs/DeleteDestination.hs",
        "gen/Amazonka/CloudWatchLogs/DeleteLogGroup.hs",
        "gen/Amazonka/CloudWatchLogs/DeleteLogStream.hs",
        "gen/Amazonka/CloudWatchLogs/DeleteMetricFilter.hs",
        "gen/Amazonka/CloudWatchLogs/DeleteQueryDefinition.hs",
        "gen/Amazonka/CloudWatchLogs/DeleteResourcePolicy.hs",
        "gen/Amazonka/CloudWatchLogs/DeleteRetentionPolicy.hs",
        "gen/Amazonka/CloudWatchLogs/DeleteSubscriptionFilter.hs",
        "gen/Amazonka/CloudWatchLogs/DescribeDestinations.hs",
        "gen/Amazonka/CloudWatchLogs/DescribeExportTasks.hs",
        "gen/Amazonka/CloudWatchLogs/DescribeLogGroups.hs",
        "gen/Amazonka/CloudWatchLogs/DescribeLogStreams.hs",
        "gen/Amazonka/CloudWatchLogs/DescribeMetricFilters.hs",
        "gen/Amazonka/CloudWatchLogs/DescribeQueries.hs",
        "gen/Amazonka/CloudWatchLogs/DescribeQueryDefinitions.hs",
        "gen/Amazonka/CloudWatchLogs/DescribeResourcePolicies.hs",
        "gen/Amazonka/CloudWatchLogs/DescribeSubscriptionFilters.hs",
        "gen/Amazonka/CloudWatchLogs/DisassociateKmsKey.hs",
        "gen/Amazonka/CloudWatchLogs/FilterLogEvents.hs",
        "gen/Amazonka/CloudWatchLogs/GetDataProtectionPolicy.hs",
        "gen/Amazonka/CloudWatchLogs/GetLogEvents.hs",
        "gen/Amazonka/CloudWatchLogs/GetLogGroupFields.hs",
        "gen/Amazonka/CloudWatchLogs/GetLogRecord.hs",
        "gen/Amazonka/CloudWatchLogs/GetQueryResults.hs",
        "gen/Amazonka/CloudWatchLogs/Lens.hs",
        "gen/Amazonka/CloudWatchLogs/ListTagsForResource.hs",
        "gen/Amazonka/CloudWatchLogs/PutDataProtectionPolicy.hs",
        "gen/Amazonka/CloudWatchLogs/PutDestination.hs",
        "gen/Amazonka/CloudWatchLogs/PutDestinationPolicy.hs",
        "gen/Amazonka/CloudWatchLogs/PutLogEvents.hs",
        "gen/Amazonka/CloudWatchLogs/PutMetricFilter.hs",
        "gen/Amazonka/CloudWatchLogs/PutQueryDefinition.hs",
        "gen/Amazonka/CloudWatchLogs/PutResourcePolicy.hs",
        "gen/Amazonka/CloudWatchLogs/PutRetentionPolicy.hs",
        "gen/Amazonka/CloudWatchLogs/PutSubscriptionFilter.hs",
        "gen/Amazonka/CloudWatchLogs/StartQuery.hs",
        "gen/Amazonka/CloudWatchLogs/StopQuery.hs",
        "gen/Amazonka/CloudWatchLogs/TagResource.hs",
        "gen/Amazonka/CloudWatchLogs/TestMetricFilter.hs",
        "gen/Amazonka/CloudWatchLogs/Types.hs",
        "gen/Amazonka/CloudWatchLogs/Types/DataProtectionStatus.hs",
        "gen/Amazonka/CloudWatchLogs/Types/Destination.hs",
        "gen/Amazonka/CloudWatchLogs/Types/Distribution.hs",
        "gen/Amazonka/CloudWatchLogs/Types/ExportTask.hs",
        "gen/Amazonka/CloudWatchLogs/Types/ExportTaskExecutionInfo.hs",
        "gen/Amazonka/CloudWatchLogs/Types/ExportTaskStatus.hs",
        "gen/Amazonka/CloudWatchLogs/Types/ExportTaskStatusCode.hs",
        "gen/Amazonka/CloudWatchLogs/Types/FilteredLogEvent.hs",
        "gen/Amazonka/CloudWatchLogs/Types/InputLogEvent.hs",
        "gen/Amazonka/CloudWatchLogs/Types/LogGroup.hs",
        "gen/Amazonka/CloudWatchLogs/Types/LogGroupField.hs",
        "gen/Amazonka/CloudWatchLogs/Types/LogStream.hs",
        "gen/Amazonka/CloudWatchLogs/Types/MetricFilter.hs",
        "gen/Amazonka/CloudWatchLogs/Types/MetricFilterMatchRecord.hs",
        "gen/Amazonka/CloudWatchLogs/Types/MetricTransformation.hs",
        "gen/Amazonka/CloudWatchLogs/Types/OrderBy.hs",
        "gen/Amazonka/CloudWatchLogs/Types/OutputLogEvent.hs",
        "gen/Amazonka/CloudWatchLogs/Types/QueryDefinition.hs",
        "gen/Amazonka/CloudWatchLogs/Types/QueryInfo.hs",
        "gen/Amazonka/CloudWatchLogs/Types/QueryStatistics.hs",
        "gen/Amazonka/CloudWatchLogs/Types/QueryStatus.hs",
        "gen/Amazonka/CloudWatchLogs/Types/RejectedLogEventsInfo.hs",
        "gen/Amazonka/CloudWatchLogs/Types/ResourcePolicy.hs",
        "gen/Amazonka/CloudWatchLogs/Types/ResultField.hs",
        "gen/Amazonka/CloudWatchLogs/Types/SearchedLogStream.hs",
        "gen/Amazonka/CloudWatchLogs/Types/StandardUnit.hs",
        "gen/Amazonka/CloudWatchLogs/Types/SubscriptionFilter.hs",
        "gen/Amazonka/CloudWatchLogs/UntagResource.hs",
        "gen/Amazonka/CloudWatchLogs/Waiters.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_cloudwatch_logs=\"2.0\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka-core",
        "@stackage//:base",
    ],
)

# rule generated from lib/services/amazonka-cloudwatch-logs/amazonka-cloudwatch-logs.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-cloudwatch-logs-test",
    srcs = [
        "test/Main.hs",
        "test/Test/Amazonka/CloudWatchLogs.hs",
        "test/Test/Amazonka/CloudWatchLogs/Internal.hs",
        "test/Test/Amazonka/Gen/CloudWatchLogs.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_cloudwatch_logs=\"2.0\"",
        "-Wall",
        "-threaded",
    ],
    main_file = "test/Main.hs",
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-cloudwatch-logs",
        "//lib/amazonka-core",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
