load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from lib/services/amazonka-elbv2/amazonka-elbv2.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-elbv2",
    srcs = [
        "gen/Amazonka/ELBV2.hs",
        "gen/Amazonka/ELBV2/AddListenerCertificates.hs",
        "gen/Amazonka/ELBV2/AddTags.hs",
        "gen/Amazonka/ELBV2/CreateListener.hs",
        "gen/Amazonka/ELBV2/CreateLoadBalancer.hs",
        "gen/Amazonka/ELBV2/CreateRule.hs",
        "gen/Amazonka/ELBV2/CreateTargetGroup.hs",
        "gen/Amazonka/ELBV2/DeleteListener.hs",
        "gen/Amazonka/ELBV2/DeleteLoadBalancer.hs",
        "gen/Amazonka/ELBV2/DeleteRule.hs",
        "gen/Amazonka/ELBV2/DeleteTargetGroup.hs",
        "gen/Amazonka/ELBV2/DeregisterTargets.hs",
        "gen/Amazonka/ELBV2/DescribeAccountLimits.hs",
        "gen/Amazonka/ELBV2/DescribeListenerCertificates.hs",
        "gen/Amazonka/ELBV2/DescribeListeners.hs",
        "gen/Amazonka/ELBV2/DescribeLoadBalancerAttributes.hs",
        "gen/Amazonka/ELBV2/DescribeLoadBalancers.hs",
        "gen/Amazonka/ELBV2/DescribeRules.hs",
        "gen/Amazonka/ELBV2/DescribeSSLPolicies.hs",
        "gen/Amazonka/ELBV2/DescribeTags.hs",
        "gen/Amazonka/ELBV2/DescribeTargetGroupAttributes.hs",
        "gen/Amazonka/ELBV2/DescribeTargetGroups.hs",
        "gen/Amazonka/ELBV2/DescribeTargetHealth.hs",
        "gen/Amazonka/ELBV2/Lens.hs",
        "gen/Amazonka/ELBV2/ModifyListener.hs",
        "gen/Amazonka/ELBV2/ModifyLoadBalancerAttributes.hs",
        "gen/Amazonka/ELBV2/ModifyRule.hs",
        "gen/Amazonka/ELBV2/ModifyTargetGroup.hs",
        "gen/Amazonka/ELBV2/ModifyTargetGroupAttributes.hs",
        "gen/Amazonka/ELBV2/RegisterTargets.hs",
        "gen/Amazonka/ELBV2/RemoveListenerCertificates.hs",
        "gen/Amazonka/ELBV2/RemoveTags.hs",
        "gen/Amazonka/ELBV2/SetIpAddressType.hs",
        "gen/Amazonka/ELBV2/SetRulePriorities.hs",
        "gen/Amazonka/ELBV2/SetSecurityGroups.hs",
        "gen/Amazonka/ELBV2/SetSubnets.hs",
        "gen/Amazonka/ELBV2/Types.hs",
        "gen/Amazonka/ELBV2/Types/Action.hs",
        "gen/Amazonka/ELBV2/Types/ActionTypeEnum.hs",
        "gen/Amazonka/ELBV2/Types/AuthenticateCognitoActionConditionalBehaviorEnum.hs",
        "gen/Amazonka/ELBV2/Types/AuthenticateCognitoActionConfig.hs",
        "gen/Amazonka/ELBV2/Types/AuthenticateOidcActionConditionalBehaviorEnum.hs",
        "gen/Amazonka/ELBV2/Types/AuthenticateOidcActionConfig.hs",
        "gen/Amazonka/ELBV2/Types/AvailabilityZone.hs",
        "gen/Amazonka/ELBV2/Types/Certificate.hs",
        "gen/Amazonka/ELBV2/Types/Cipher.hs",
        "gen/Amazonka/ELBV2/Types/FixedResponseActionConfig.hs",
        "gen/Amazonka/ELBV2/Types/ForwardActionConfig.hs",
        "gen/Amazonka/ELBV2/Types/HostHeaderConditionConfig.hs",
        "gen/Amazonka/ELBV2/Types/HttpHeaderConditionConfig.hs",
        "gen/Amazonka/ELBV2/Types/HttpRequestMethodConditionConfig.hs",
        "gen/Amazonka/ELBV2/Types/IpAddressType.hs",
        "gen/Amazonka/ELBV2/Types/Limit.hs",
        "gen/Amazonka/ELBV2/Types/Listener.hs",
        "gen/Amazonka/ELBV2/Types/LoadBalancer.hs",
        "gen/Amazonka/ELBV2/Types/LoadBalancerAddress.hs",
        "gen/Amazonka/ELBV2/Types/LoadBalancerAttribute.hs",
        "gen/Amazonka/ELBV2/Types/LoadBalancerSchemeEnum.hs",
        "gen/Amazonka/ELBV2/Types/LoadBalancerState.hs",
        "gen/Amazonka/ELBV2/Types/LoadBalancerStateEnum.hs",
        "gen/Amazonka/ELBV2/Types/LoadBalancerTypeEnum.hs",
        "gen/Amazonka/ELBV2/Types/Matcher.hs",
        "gen/Amazonka/ELBV2/Types/PathPatternConditionConfig.hs",
        "gen/Amazonka/ELBV2/Types/ProtocolEnum.hs",
        "gen/Amazonka/ELBV2/Types/QueryStringConditionConfig.hs",
        "gen/Amazonka/ELBV2/Types/QueryStringKeyValuePair.hs",
        "gen/Amazonka/ELBV2/Types/RedirectActionConfig.hs",
        "gen/Amazonka/ELBV2/Types/RedirectActionStatusCodeEnum.hs",
        "gen/Amazonka/ELBV2/Types/Rule.hs",
        "gen/Amazonka/ELBV2/Types/RuleCondition.hs",
        "gen/Amazonka/ELBV2/Types/RulePriorityPair.hs",
        "gen/Amazonka/ELBV2/Types/SourceIpConditionConfig.hs",
        "gen/Amazonka/ELBV2/Types/SslPolicy.hs",
        "gen/Amazonka/ELBV2/Types/SubnetMapping.hs",
        "gen/Amazonka/ELBV2/Types/Tag.hs",
        "gen/Amazonka/ELBV2/Types/TagDescription.hs",
        "gen/Amazonka/ELBV2/Types/TargetDescription.hs",
        "gen/Amazonka/ELBV2/Types/TargetGroup.hs",
        "gen/Amazonka/ELBV2/Types/TargetGroupAttribute.hs",
        "gen/Amazonka/ELBV2/Types/TargetGroupIpAddressTypeEnum.hs",
        "gen/Amazonka/ELBV2/Types/TargetGroupStickinessConfig.hs",
        "gen/Amazonka/ELBV2/Types/TargetGroupTuple.hs",
        "gen/Amazonka/ELBV2/Types/TargetHealth.hs",
        "gen/Amazonka/ELBV2/Types/TargetHealthDescription.hs",
        "gen/Amazonka/ELBV2/Types/TargetHealthReasonEnum.hs",
        "gen/Amazonka/ELBV2/Types/TargetHealthStateEnum.hs",
        "gen/Amazonka/ELBV2/Types/TargetTypeEnum.hs",
        "gen/Amazonka/ELBV2/Waiters.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_elbv2=\"2.0\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka-core",
        "@stackage//:base",
    ],
)

# rule generated from lib/services/amazonka-elbv2/amazonka-elbv2.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-elbv2-test",
    srcs = [
        "test/Main.hs",
        "test/Test/Amazonka/ELBV2.hs",
        "test/Test/Amazonka/ELBV2/Internal.hs",
        "test/Test/Amazonka/Gen/ELBV2.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_elbv2=\"2.0\"",
        "-Wall",
        "-threaded",
    ],
    main_file = "test/Main.hs",
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-elbv2",
        "//lib/amazonka-core",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
