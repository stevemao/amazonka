load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from lib/services/amazonka-opensearchserverless/amazonka-opensearchserverless.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-opensearchserverless",
    srcs = [
        "gen/Amazonka/OpenSearchServerless.hs",
        "gen/Amazonka/OpenSearchServerless/BatchGetCollection.hs",
        "gen/Amazonka/OpenSearchServerless/BatchGetVpcEndpoint.hs",
        "gen/Amazonka/OpenSearchServerless/CreateAccessPolicy.hs",
        "gen/Amazonka/OpenSearchServerless/CreateCollection.hs",
        "gen/Amazonka/OpenSearchServerless/CreateSecurityConfig.hs",
        "gen/Amazonka/OpenSearchServerless/CreateSecurityPolicy.hs",
        "gen/Amazonka/OpenSearchServerless/CreateVpcEndpoint.hs",
        "gen/Amazonka/OpenSearchServerless/DeleteAccessPolicy.hs",
        "gen/Amazonka/OpenSearchServerless/DeleteCollection.hs",
        "gen/Amazonka/OpenSearchServerless/DeleteSecurityConfig.hs",
        "gen/Amazonka/OpenSearchServerless/DeleteSecurityPolicy.hs",
        "gen/Amazonka/OpenSearchServerless/DeleteVpcEndpoint.hs",
        "gen/Amazonka/OpenSearchServerless/GetAccessPolicy.hs",
        "gen/Amazonka/OpenSearchServerless/GetAccountSettings.hs",
        "gen/Amazonka/OpenSearchServerless/GetPoliciesStats.hs",
        "gen/Amazonka/OpenSearchServerless/GetSecurityConfig.hs",
        "gen/Amazonka/OpenSearchServerless/GetSecurityPolicy.hs",
        "gen/Amazonka/OpenSearchServerless/Lens.hs",
        "gen/Amazonka/OpenSearchServerless/ListAccessPolicies.hs",
        "gen/Amazonka/OpenSearchServerless/ListCollections.hs",
        "gen/Amazonka/OpenSearchServerless/ListSecurityConfigs.hs",
        "gen/Amazonka/OpenSearchServerless/ListSecurityPolicies.hs",
        "gen/Amazonka/OpenSearchServerless/ListTagsForResource.hs",
        "gen/Amazonka/OpenSearchServerless/ListVpcEndpoints.hs",
        "gen/Amazonka/OpenSearchServerless/TagResource.hs",
        "gen/Amazonka/OpenSearchServerless/Types.hs",
        "gen/Amazonka/OpenSearchServerless/Types/AccessPolicyDetail.hs",
        "gen/Amazonka/OpenSearchServerless/Types/AccessPolicyStats.hs",
        "gen/Amazonka/OpenSearchServerless/Types/AccessPolicySummary.hs",
        "gen/Amazonka/OpenSearchServerless/Types/AccessPolicyType.hs",
        "gen/Amazonka/OpenSearchServerless/Types/AccountSettingsDetail.hs",
        "gen/Amazonka/OpenSearchServerless/Types/CapacityLimits.hs",
        "gen/Amazonka/OpenSearchServerless/Types/CollectionDetail.hs",
        "gen/Amazonka/OpenSearchServerless/Types/CollectionErrorDetail.hs",
        "gen/Amazonka/OpenSearchServerless/Types/CollectionFilters.hs",
        "gen/Amazonka/OpenSearchServerless/Types/CollectionStatus.hs",
        "gen/Amazonka/OpenSearchServerless/Types/CollectionSummary.hs",
        "gen/Amazonka/OpenSearchServerless/Types/CollectionType.hs",
        "gen/Amazonka/OpenSearchServerless/Types/CreateCollectionDetail.hs",
        "gen/Amazonka/OpenSearchServerless/Types/CreateVpcEndpointDetail.hs",
        "gen/Amazonka/OpenSearchServerless/Types/DeleteCollectionDetail.hs",
        "gen/Amazonka/OpenSearchServerless/Types/DeleteVpcEndpointDetail.hs",
        "gen/Amazonka/OpenSearchServerless/Types/Document.hs",
        "gen/Amazonka/OpenSearchServerless/Types/SamlConfigOptions.hs",
        "gen/Amazonka/OpenSearchServerless/Types/SecurityConfigDetail.hs",
        "gen/Amazonka/OpenSearchServerless/Types/SecurityConfigStats.hs",
        "gen/Amazonka/OpenSearchServerless/Types/SecurityConfigSummary.hs",
        "gen/Amazonka/OpenSearchServerless/Types/SecurityConfigType.hs",
        "gen/Amazonka/OpenSearchServerless/Types/SecurityPolicyDetail.hs",
        "gen/Amazonka/OpenSearchServerless/Types/SecurityPolicyStats.hs",
        "gen/Amazonka/OpenSearchServerless/Types/SecurityPolicySummary.hs",
        "gen/Amazonka/OpenSearchServerless/Types/SecurityPolicyType.hs",
        "gen/Amazonka/OpenSearchServerless/Types/Tag.hs",
        "gen/Amazonka/OpenSearchServerless/Types/UpdateCollectionDetail.hs",
        "gen/Amazonka/OpenSearchServerless/Types/UpdateVpcEndpointDetail.hs",
        "gen/Amazonka/OpenSearchServerless/Types/VpcEndpointDetail.hs",
        "gen/Amazonka/OpenSearchServerless/Types/VpcEndpointErrorDetail.hs",
        "gen/Amazonka/OpenSearchServerless/Types/VpcEndpointFilters.hs",
        "gen/Amazonka/OpenSearchServerless/Types/VpcEndpointStatus.hs",
        "gen/Amazonka/OpenSearchServerless/Types/VpcEndpointSummary.hs",
        "gen/Amazonka/OpenSearchServerless/UntagResource.hs",
        "gen/Amazonka/OpenSearchServerless/UpdateAccessPolicy.hs",
        "gen/Amazonka/OpenSearchServerless/UpdateAccountSettings.hs",
        "gen/Amazonka/OpenSearchServerless/UpdateCollection.hs",
        "gen/Amazonka/OpenSearchServerless/UpdateSecurityConfig.hs",
        "gen/Amazonka/OpenSearchServerless/UpdateSecurityPolicy.hs",
        "gen/Amazonka/OpenSearchServerless/UpdateVpcEndpoint.hs",
        "gen/Amazonka/OpenSearchServerless/Waiters.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_opensearchserverless=\"2.0\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka-core",
        "@stackage//:base",
    ],
)

# rule generated from lib/services/amazonka-opensearchserverless/amazonka-opensearchserverless.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-opensearchserverless-test",
    srcs = [
        "test/Main.hs",
        "test/Test/Amazonka/Gen/OpenSearchServerless.hs",
        "test/Test/Amazonka/OpenSearchServerless.hs",
        "test/Test/Amazonka/OpenSearchServerless/Internal.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_opensearchserverless=\"2.0\"",
        "-Wall",
        "-threaded",
    ],
    main_file = "test/Main.hs",
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-opensearchserverless",
        "//lib/amazonka-core",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
