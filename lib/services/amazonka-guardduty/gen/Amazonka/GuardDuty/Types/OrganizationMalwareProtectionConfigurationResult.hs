{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.GuardDuty.Types.OrganizationMalwareProtectionConfigurationResult
-- Copyright   : (c) 2013-2022 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Amazonka.GuardDuty.Types.OrganizationMalwareProtectionConfigurationResult where

import qualified Amazonka.Core as Core
import qualified Amazonka.Core.Lens.Internal as Lens
import qualified Amazonka.Data as Data
import Amazonka.GuardDuty.Types.OrganizationScanEc2InstanceWithFindingsResult
import qualified Amazonka.Prelude as Prelude

-- | An object that contains information on the status of all Malware
-- Protection data source for an organization.
--
-- /See:/ 'newOrganizationMalwareProtectionConfigurationResult' smart constructor.
data OrganizationMalwareProtectionConfigurationResult = OrganizationMalwareProtectionConfigurationResult'
  { -- | Describes the configuration for scanning EC2 instances with findings for
    -- an organization.
    scanEc2InstanceWithFindings :: Prelude.Maybe OrganizationScanEc2InstanceWithFindingsResult
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'OrganizationMalwareProtectionConfigurationResult' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'scanEc2InstanceWithFindings', 'organizationMalwareProtectionConfigurationResult_scanEc2InstanceWithFindings' - Describes the configuration for scanning EC2 instances with findings for
-- an organization.
newOrganizationMalwareProtectionConfigurationResult ::
  OrganizationMalwareProtectionConfigurationResult
newOrganizationMalwareProtectionConfigurationResult =
  OrganizationMalwareProtectionConfigurationResult'
    { scanEc2InstanceWithFindings =
        Prelude.Nothing
    }

-- | Describes the configuration for scanning EC2 instances with findings for
-- an organization.
organizationMalwareProtectionConfigurationResult_scanEc2InstanceWithFindings :: Lens.Lens' OrganizationMalwareProtectionConfigurationResult (Prelude.Maybe OrganizationScanEc2InstanceWithFindingsResult)
organizationMalwareProtectionConfigurationResult_scanEc2InstanceWithFindings = Lens.lens (\OrganizationMalwareProtectionConfigurationResult' {scanEc2InstanceWithFindings} -> scanEc2InstanceWithFindings) (\s@OrganizationMalwareProtectionConfigurationResult' {} a -> s {scanEc2InstanceWithFindings = a} :: OrganizationMalwareProtectionConfigurationResult)

instance
  Data.FromJSON
    OrganizationMalwareProtectionConfigurationResult
  where
  parseJSON =
    Data.withObject
      "OrganizationMalwareProtectionConfigurationResult"
      ( \x ->
          OrganizationMalwareProtectionConfigurationResult'
            Prelude.<$> (x Data..:? "scanEc2InstanceWithFindings")
      )

instance
  Prelude.Hashable
    OrganizationMalwareProtectionConfigurationResult
  where
  hashWithSalt
    _salt
    OrganizationMalwareProtectionConfigurationResult' {..} =
      _salt
        `Prelude.hashWithSalt` scanEc2InstanceWithFindings

instance
  Prelude.NFData
    OrganizationMalwareProtectionConfigurationResult
  where
  rnf
    OrganizationMalwareProtectionConfigurationResult' {..} =
      Prelude.rnf scanEc2InstanceWithFindings
