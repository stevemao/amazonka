load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from lib/services/amazonka-emr-serverless/amazonka-emr-serverless.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-emr-serverless",
    srcs = [
        "gen/Amazonka/EMRServerless.hs",
        "gen/Amazonka/EMRServerless/CancelJobRun.hs",
        "gen/Amazonka/EMRServerless/CreateApplication.hs",
        "gen/Amazonka/EMRServerless/DeleteApplication.hs",
        "gen/Amazonka/EMRServerless/GetApplication.hs",
        "gen/Amazonka/EMRServerless/GetDashboardForJobRun.hs",
        "gen/Amazonka/EMRServerless/GetJobRun.hs",
        "gen/Amazonka/EMRServerless/Lens.hs",
        "gen/Amazonka/EMRServerless/ListApplications.hs",
        "gen/Amazonka/EMRServerless/ListJobRuns.hs",
        "gen/Amazonka/EMRServerless/ListTagsForResource.hs",
        "gen/Amazonka/EMRServerless/StartApplication.hs",
        "gen/Amazonka/EMRServerless/StartJobRun.hs",
        "gen/Amazonka/EMRServerless/StopApplication.hs",
        "gen/Amazonka/EMRServerless/TagResource.hs",
        "gen/Amazonka/EMRServerless/Types.hs",
        "gen/Amazonka/EMRServerless/Types/Application.hs",
        "gen/Amazonka/EMRServerless/Types/ApplicationState.hs",
        "gen/Amazonka/EMRServerless/Types/ApplicationSummary.hs",
        "gen/Amazonka/EMRServerless/Types/Architecture.hs",
        "gen/Amazonka/EMRServerless/Types/AutoStartConfig.hs",
        "gen/Amazonka/EMRServerless/Types/AutoStopConfig.hs",
        "gen/Amazonka/EMRServerless/Types/Configuration.hs",
        "gen/Amazonka/EMRServerless/Types/ConfigurationOverrides.hs",
        "gen/Amazonka/EMRServerless/Types/Hive.hs",
        "gen/Amazonka/EMRServerless/Types/InitialCapacityConfig.hs",
        "gen/Amazonka/EMRServerless/Types/JobDriver.hs",
        "gen/Amazonka/EMRServerless/Types/JobRun.hs",
        "gen/Amazonka/EMRServerless/Types/JobRunState.hs",
        "gen/Amazonka/EMRServerless/Types/JobRunSummary.hs",
        "gen/Amazonka/EMRServerless/Types/ManagedPersistenceMonitoringConfiguration.hs",
        "gen/Amazonka/EMRServerless/Types/MaximumAllowedResources.hs",
        "gen/Amazonka/EMRServerless/Types/MonitoringConfiguration.hs",
        "gen/Amazonka/EMRServerless/Types/NetworkConfiguration.hs",
        "gen/Amazonka/EMRServerless/Types/S3MonitoringConfiguration.hs",
        "gen/Amazonka/EMRServerless/Types/SparkSubmit.hs",
        "gen/Amazonka/EMRServerless/Types/TotalResourceUtilization.hs",
        "gen/Amazonka/EMRServerless/Types/WorkerResourceConfig.hs",
        "gen/Amazonka/EMRServerless/UntagResource.hs",
        "gen/Amazonka/EMRServerless/UpdateApplication.hs",
        "gen/Amazonka/EMRServerless/Waiters.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_emr_serverless=\"2.0\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka-core",
        "@stackage//:base",
    ],
)

# rule generated from lib/services/amazonka-emr-serverless/amazonka-emr-serverless.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-emr-serverless-test",
    srcs = [
        "test/Main.hs",
        "test/Test/Amazonka/EMRServerless.hs",
        "test/Test/Amazonka/EMRServerless/Internal.hs",
        "test/Test/Amazonka/Gen/EMRServerless.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_emr_serverless=\"2.0\"",
        "-Wall",
        "-threaded",
    ],
    main_file = "test/Main.hs",
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-emr-serverless",
        "//lib/amazonka-core",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
