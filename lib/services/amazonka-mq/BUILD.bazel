load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# rule generated from lib/services/amazonka-mq/amazonka-mq.cabal by gazelle_cabal
haskell_library(
    name = "amazonka-mq",
    srcs = [
        "gen/Amazonka/MQ.hs",
        "gen/Amazonka/MQ/CreateBroker.hs",
        "gen/Amazonka/MQ/CreateConfiguration.hs",
        "gen/Amazonka/MQ/CreateTags.hs",
        "gen/Amazonka/MQ/CreateUser.hs",
        "gen/Amazonka/MQ/DeleteBroker.hs",
        "gen/Amazonka/MQ/DeleteTags.hs",
        "gen/Amazonka/MQ/DeleteUser.hs",
        "gen/Amazonka/MQ/DescribeBroker.hs",
        "gen/Amazonka/MQ/DescribeBrokerEngineTypes.hs",
        "gen/Amazonka/MQ/DescribeBrokerInstanceOptions.hs",
        "gen/Amazonka/MQ/DescribeConfiguration.hs",
        "gen/Amazonka/MQ/DescribeConfigurationRevision.hs",
        "gen/Amazonka/MQ/DescribeUser.hs",
        "gen/Amazonka/MQ/Lens.hs",
        "gen/Amazonka/MQ/ListBrokers.hs",
        "gen/Amazonka/MQ/ListConfigurationRevisions.hs",
        "gen/Amazonka/MQ/ListConfigurations.hs",
        "gen/Amazonka/MQ/ListTags.hs",
        "gen/Amazonka/MQ/ListUsers.hs",
        "gen/Amazonka/MQ/RebootBroker.hs",
        "gen/Amazonka/MQ/Types.hs",
        "gen/Amazonka/MQ/Types/ActionRequired.hs",
        "gen/Amazonka/MQ/Types/AuthenticationStrategy.hs",
        "gen/Amazonka/MQ/Types/AvailabilityZone.hs",
        "gen/Amazonka/MQ/Types/BrokerEngineType.hs",
        "gen/Amazonka/MQ/Types/BrokerInstance.hs",
        "gen/Amazonka/MQ/Types/BrokerInstanceOption.hs",
        "gen/Amazonka/MQ/Types/BrokerState.hs",
        "gen/Amazonka/MQ/Types/BrokerStorageType.hs",
        "gen/Amazonka/MQ/Types/BrokerSummary.hs",
        "gen/Amazonka/MQ/Types/ChangeType.hs",
        "gen/Amazonka/MQ/Types/Configuration.hs",
        "gen/Amazonka/MQ/Types/ConfigurationId.hs",
        "gen/Amazonka/MQ/Types/ConfigurationRevision.hs",
        "gen/Amazonka/MQ/Types/Configurations.hs",
        "gen/Amazonka/MQ/Types/DayOfWeek.hs",
        "gen/Amazonka/MQ/Types/DeploymentMode.hs",
        "gen/Amazonka/MQ/Types/EncryptionOptions.hs",
        "gen/Amazonka/MQ/Types/EngineType.hs",
        "gen/Amazonka/MQ/Types/EngineVersion.hs",
        "gen/Amazonka/MQ/Types/LdapServerMetadataInput.hs",
        "gen/Amazonka/MQ/Types/LdapServerMetadataOutput.hs",
        "gen/Amazonka/MQ/Types/Logs.hs",
        "gen/Amazonka/MQ/Types/LogsSummary.hs",
        "gen/Amazonka/MQ/Types/PendingLogs.hs",
        "gen/Amazonka/MQ/Types/SanitizationWarning.hs",
        "gen/Amazonka/MQ/Types/SanitizationWarningReason.hs",
        "gen/Amazonka/MQ/Types/User.hs",
        "gen/Amazonka/MQ/Types/UserPendingChanges.hs",
        "gen/Amazonka/MQ/Types/UserSummary.hs",
        "gen/Amazonka/MQ/Types/WeeklyStartTime.hs",
        "gen/Amazonka/MQ/UpdateBroker.hs",
        "gen/Amazonka/MQ/UpdateConfiguration.hs",
        "gen/Amazonka/MQ/UpdateUser.hs",
        "gen/Amazonka/MQ/Waiters.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_mq=\"2.0\"",
        "-Wall",
        "-fwarn-incomplete-uni-patterns",
        "-fwarn-incomplete-record-updates",
        "-funbox-strict-fields",
    ],
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        "//lib/amazonka-core",
        "@stackage//:base",
    ],
)

# rule generated from lib/services/amazonka-mq/amazonka-mq.cabal by gazelle_cabal
haskell_test(
    name = "amazonka-mq-test",
    srcs = [
        "test/Main.hs",
        "test/Test/Amazonka/Gen/MQ.hs",
        "test/Test/Amazonka/MQ.hs",
        "test/Test/Amazonka/MQ/Internal.hs",
    ],
    ghcopts = [
        "-DVERSION_amazonka_mq=\"2.0\"",
        "-Wall",
        "-threaded",
    ],
    main_file = "test/Main.hs",
    version = "2.0",
    visibility = ["//visibility:public"],
    deps = [
        ":amazonka-mq",
        "//lib/amazonka-core",
        "//lib/amazonka-test",
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:case-insensitive",
        "@stackage//:tasty",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
    ],
)
